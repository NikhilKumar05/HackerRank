'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

function queensAttack(n, k, r_q, c_q, obstacles) {
let c = n * 2 - 2
  c += Math.min(n - r_q, n - c_q) 
  c += Math.min(r_q - 1, n - c_q) 
  c += Math.min(r_q - 1, c_q - 1) 
  c += Math.min(c_q - 1, n - r_q) 

  let m = {'n':0, 'ne':0, 'e':0, 'se':0, 's':0, 'sw':0, 'w':0, 'nw':0}
  
  for (let i = k; i-- > 0;) {

    let y = obstacles[i][0] - r_q,
        x = obstacles[i][1] - c_q,
        cy = 0,
        cx = 0,
        cxy
        k

    if (y > 0) { // n
      cy = n - r_q - y + 1
    } else if (y < 0) {
      cy = r_q + y
    }

    if (x > 0) { // e
      cx = n - c_q - x + 1
    } else if (x < 0) { 
      cx = c_q + x
    }

    if (x == y) { // ne sw
      k = x > 0 ? 'ne' : 'sw'
      cxy = Math.min(cx, cy)
    } else if (x + y == 0) { 
      k = x > 0 ? 'se' : 'nw'
      cxy = Math.min(cx, cy)
    } else if (x == 0) { 
      k = y > 0 ? 'n' : 's'
      cxy = cy
    } else if (y == 0) { 
      k = x > 0 ? 'e' : 'w'
      cxy = cx
    }

    if (m[k] < cxy) { 
      c -= cxy - m[k]
      m[k] = cxy
    }
  }

  return c
}

// 40
console.log(queensAttack(100,100,48,81,
[[54,87],
[64,97],
[42,75],
[32,65],
[42,87],
[32,97],
[54,75],
[64,65],
[48,87],
[48,75],
[54,81],
[42,81],
[45,17],
[14,24],
[35,15],
[95,64],
[63,87],
[25,72],
[71,38],
[96,97],
[16,30],
[60,34],
[31,67],
[26,82],
[20,93],
[81,38],
[51,94],
[75,41],
[79,84],
[79,65],
[76,80],
[52,87],
[81,54],
[89,52],
[20,31],
[10,41],
[32,73],
[83,98],
[87,61],
[82,52],
[80,64],
[82,46],
[49,21],
[73,86],
[37,70],
[43,12],
[94,28],
[10,93],
[52,25],
[50,61],
[52,68],
[52,23],
[60,91],
[79,17],
[93,82],
[12,18],
[75,64],
[69,69],
[94,74],
[61,61],
[46,57],
[67,45],
[96,64],
[83,89],
[58,87],
[76,53],
[79,21],
[94,70],
[16,10],
[50,82],
[92,20],
[40,51],
[49,28],
[51,82],
[35,16],
[15,86],
[78,89],
[41,98],
[70,46],
[79,79],
[24,40],
[91,13],
[59,73],
[35,32],
[40,31],
[14,31],
[71,35],
[96,18],
[27,39],
[28,38],
[41,36],
[31,63],
[52,48],
[81,25],
[49,90],
[32,65],
[25,45],
[63,94],
[89,50],
[43,41]]))


function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const nk = readLine().split(' ');

    const n = parseInt(nk[0], 10);

    const k = parseInt(nk[1], 10);

    const r_qC_q = readLine().split(' ');

    const r_q = parseInt(r_qC_q[0], 10);

    const c_q = parseInt(r_qC_q[1], 10);

    let obstacles = Array(k);

    for (let i = 0; i < k; i++) {
        obstacles[i] = readLine().split(' ').map(obstaclesTemp => parseInt(obstaclesTemp, 10));
    }

    let result = queensAttack(n, k, r_q, c_q, obstacles);

    ws.write(result + "\n");

    ws.end();
}
